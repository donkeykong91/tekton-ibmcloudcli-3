apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: secure-kube-pipeline
spec:
  params:
    - name: ibmcloud-username
      description: Username of the IBM Cloud account
      default: ""
    # - name: ibmcloud-password
    #   description: Password of the IBM Cloud account
    #   default: ""
    - name: registry-url
      description: The url of the registry
      default: ""
    - name: registry-namespace-staging
      description: The staging namespace
      default: ""
    - name: repository-test
      description: The test repository
      default: ""
    # - name: api-security-repository
    #   description: The git repo for api-security test scripts
    #   default: ""
    # - name: manifest-repository
    #   description: The git repo for scct-manifest
    #   default: ""
    # - name: repository
    #   description: the git repo containing source code. If empty, the repository url will be found from toolchain
    #   default: ""
    # - name: branch
    #   description: the branch for the git repo
    #   default: "master"
    # - name: revision
    #   description: the git revision/commit for the git repo
    #   default: ""
    # - name: fail-on-lint-errors
    #   description: force failure of task when docker lint errors are found
    #   default: "true"
    # - name: fail-on-scanned-issues
    #   description: force failure of task when vulnerability advisor scan issues are found
    #   default: "true"
    # - name: path-to-context
    #   default: "."
    # - name: path-to-dockerfile
    #   default: "."
    # - name: dockerfile
    #   default: "Dockerfile"
    # - name: build-args
    #   description: ibmcloud cr build argument list in the format 'KEY=VALUE' with a key-value pair per line.
    #   default: ""
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    # - name: registry-apikey
    #   description: IBM Cloud container registry apikey
    # - name: app-name
    #   description: application name
    # - name: image-name
    #   description: image name
    # - name: deployment-file
    #   description: file containing the kubernetes deployment definition
    #   default: "deployment.yml"
    # - name: dev-region
    # - name: dev-resource-group
    # - name: cluster-name
    #   description: the name of the cluster to target
    # - name: dev-cluster-namespace
    #   description: the namespace
    # - name: pipeline-debug
    #   default: "0"
  workspaces:
    - name: pipeline-ws
  tasks:
    # - name: extract-repository-url
    #   taskRef:
    #     name: toolchain-extract-value
    #   params:
    #     - name: expression
    #       # if a params.repository is given, it takes precedence
    #       value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)  
    # - name: git-clone
    #   taskRef:
    #     name: git-clone-repo
    #   params:
    #     - name: continuous-delivery-context-secret
    #       value: "secure-properties"
    #     - name: ibmcloud-apikey-secret-key
    #       value: "toolchain-apikey"
    #     - name: repository
    #       value: $(tasks.extract-repository-url.results.extracted-value)
    #     - name: branch
    #       value: $(params.branch)
    #     - name: revision
    #       value: $(params.revision)
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    #   workspaces:
    #     - name: output
    #       workspace: pipeline-ws
    # - name: git-api-security-clone
    #   runAfter: [git-clone]
    #   taskRef:
    #     name: git-clone-repo
    #   params:
    #     - name: continuous-delivery-context-secret
    #       value: "secure-properties"
    #     - name: ibmcloud-apikey-secret-key
    #       value: "toolchain-apikey"
    #     - name: repository
    #       value: $(params.api-security-repository)
    #     - name: directory-name
    #       value: "./api-security"
    #   workspaces:
    #     - name: output
    #       workspace: pipeline-ws
    # - name: git-manifest-clone
    #   runAfter: [git-clone]
    #   taskRef:
    #     name: git-clone-repo
    #   params:
    #     - name: continuous-delivery-context-secret
    #       value: "secure-properties"
    #     - name: ibmcloud-apikey-secret-key
    #       value: "toolchain-apikey"
    #     - name: repository
    #       value: $(params.manifest-repository)
    #     - name: directory-name
    #       value: "./scct-manifests"
    #   workspaces:
    #     - name: output
    #       workspace: pipeline-ws
    # - name: extract-doi-enablement
    #   taskRef:
    #     name: toolchain-extract-value
    #   params:
    #     # count the number of service in the toolchain that are DevopsInsights
    #     - name: expression
    #       value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    # - name: publish-doi-buildrecord
    #   runAfter: [git-clone]
    #   taskRef:
    #     name: doi-publish-buildrecord
    #   conditions:
    #     - conditionRef: utils-evaluate
    #       params:
    #         - name: value
    #           value: $(tasks.extract-doi-enablement.results.extracted-value)
    #         - name: expected
    #           value: "1"
    #   params:
    #     - name: toolchain-apikey-secret-key
    #       value: "toolchain-apikey"
    #     - name: app-name
    #       value: $(params.app-name)
    #     - name: git-repository
    #       value: $(tasks.git-clone.results.git-repository)
    #     - name: git-branch
    #       value: $(tasks.git-clone.results.git-branch)
    #     - name: git-commit
    #       value: $(tasks.git-clone.results.git-commit)
    # - name: docker-lint
    #   runAfter: [git-clone]
    #   taskRef:
    #     name: linter-docker-lint
    #   params:
    #     - name: path-to-dockerfile
    #       value: $(params.path-to-dockerfile)
    #     - name: dockerfile
    #       value: $(params.dockerfile)
    #     - name: fail-on-lint-errors
    #       value: $(params.fail-on-lint-errors)
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    #   workspaces:
    #     - name: workspace
    #       workspace: pipeline-ws
    # - name: security-tests
    #   runAfter: [git-api-security-clone, docker-lint]
    #   taskRef:
    #     name: tester-run-tests
    #   params:
    #     - name: tests-script
    #       value: |
    #         if [ -f ./api-security/run-tests.sh ]; then
    #           source ./api-security/run-tests.sh
    #         else
    #           echo "Test runner script not found: ./api-security/run-tests.sh"
    #         fi
    #   workspaces:
    #     - name: artifacts
    #       workspace: pipeline-ws
    # - name: containerize
    #   runAfter: [security-tests]
    #   taskRef:
    #     name: icr-cr-build
    #   params:
    #     - name: continuous-delivery-context-secret
    #       value: "secure-properties"
    #     - name: container-registry-apikey-secret-key
    #       value: "registry-apikey"
    #     - name: registry-region
    #       value: $(params.registry-region)
    #     - name: registry-namespace
    #       value: $(params.registry-namespace)
    #     - name: image-name
    #       value: $(params.image-name)
    #     - name: path-to-context
    #       value: $(params.path-to-context)
    #     - name: path-to-dockerfile
    #       value: $(params.path-to-dockerfile)
    #     - name: dockerfile
    #       value: $(params.dockerfile)
    #     - name: build-args
    #       value: $(params.build-args)
    #     - name: additional-tags-script
    #       value: |
    #         # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
    #         # e.g. 3-master-50da6912-20181123114435
    #         # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
    #         GIT_BRANCH="$(tasks.git-clone.results.git-branch)"
    #         GIT_COMMIT="$(tasks.git-clone.results.git-commit)"
    #         TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
    #         IMAGE_TAG=${TIMESTAMP}
    #         if [ ! -z "${GIT_COMMIT}" ]; then
    #           GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 )
    #           IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
    #         fi
    #         if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
    #         IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
    #         echo "$IMAGE_TAG"
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    #   workspaces:
    #     - name: source
    #       workspace: pipeline-ws
    # - name: vulnerability-advisor
    #   taskRef:
    #     name: icr-check-va-scan
    #   params:
    #     - name: continuous-delivery-context-secret
    #       value: "secure-properties"
    #     - name: container-registry-apikey-secret-key
    #       value: "registry-apikey"
    #     - name: scan-report-file
    #       value: 'app-image-va-report.json'
    #     - name: fail-on-scanned-issues
    #       value: $(params.fail-on-scanned-issues)
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    #     - name: image-url
    #       value: $(tasks.containerize.results.image-repository)
    #     - name: image-digest
    #       value: $(tasks.containerize.results.image-digest)
    #   workspaces:
    #     - name: artifacts
    #       workspace: pipeline-ws
    # - name: publish-doi-va-scan-record
      # runAfter: [vulnerability-advisor]
      # taskRef:
      #   name: doi-publish-testrecord
      # conditions:
      #   - conditionRef: utils-evaluate
      #     params:
      #       - name: value
      #         value: $(tasks.extract-doi-enablement.results.extracted-value)
      #       - name: expected
      #         value: "1"
      # params:
      #   - name: toolchain-apikey-secret-key
      #     value: "toolchain-apikey"
      #   - name: build-number
      #     value: "$(tasks.publish-doi-buildrecord.results.build-number)"
      #   - name: app-name
      #     value: $(params.app-name)
      #   - name: file-locations
      #     value: $(tasks.vulnerability-advisor.results.scan-report-file)
      #   - name: test-types
      #     value: vulnerabilityadvisor
      #   - name: pipeline-debug
      #     value: $(params.pipeline-debug)
      # workspaces:
      #   - name: artifacts
      #     workspace: pipeline-ws
    - name: copy-to-staging
      # runAfter: [containerize]
      taskRef:
        name: icr-copy
      params: 
        - name: ibmcloud-username
          value: $(params.ibmcloud-username)
        # - name: ibmcloud-password
        #   value: $(params.ibmcloud-password)
        - name: registry
          value: $(params.registry-url)
        - name: namespace
          value: $(params.registry-namespace)
        - name: namespace-staging
          value: $(params.registry-namespace-staging)
        - name: repository
          value: $(params.repository-test)
        - name: region
          value: $(params.registry-region)